{"ast":null,"code":"import _classCallCheck from \"C:\\\\Personal\\\\React\\\\quiz-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Personal\\\\React\\\\quiz-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { drawLinkLine as _drawLinkLine, drawLinkTriangle as _drawLinkTriangle } from \"./Utils\";\nimport { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nexport var LinkInstance = /*#__PURE__*/function () {\n  function LinkInstance(container) {\n    _classCallCheck(this, LinkInstance);\n\n    this.container = container;\n  }\n\n  _createClass(LinkInstance, [{\n    key: \"drawParticle\",\n    value: function drawParticle(context, particle) {\n      var _a;\n\n      var container = this.container,\n          pOptions = particle.options;\n\n      if (!particle.links || particle.links.length <= 0) {\n        return;\n      }\n\n      context.save();\n      var p1Links = particle.links.filter(function (l) {\n        return pOptions.links && container.particles.getLinkFrequency(particle, l.destination) <= pOptions.links.frequency;\n      });\n\n      var _iterator = _createForOfIteratorHelper(p1Links),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var link = _step.value;\n          this.drawTriangles(container, pOptions, particle, link, p1Links);\n\n          if (link.opacity > 0 && ((_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0) > 0) {\n            this.drawLinkLine(particle, link);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      context.restore();\n    }\n  }, {\n    key: \"particleCreated\",\n    value: function particleCreated(particle) {\n      particle.links = [];\n\n      if (!particle.options.links) {\n        return;\n      }\n\n      var ratio = this.container.retina.pixelRatio;\n      particle.retina.linksDistance = particle.options.links.distance * ratio;\n      particle.retina.linksWidth = particle.options.links.width * ratio;\n    }\n  }, {\n    key: \"particleDestroyed\",\n    value: function particleDestroyed(particle) {\n      particle.links = [];\n    }\n  }, {\n    key: \"drawLinkLine\",\n    value: function drawLinkLine(p1, link) {\n      var container = this.container,\n          options = container.actualOptions,\n          p2 = link.destination,\n          pos1 = p1.getPosition(),\n          pos2 = p2.getPosition();\n      var opacity = link.opacity;\n      container.canvas.draw(function (ctx) {\n        var _a, _b, _c;\n\n        if (!p1.options.links) {\n          return;\n        }\n\n        var colorLine;\n        var twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n\n        if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n          var twinkleFreq = twinkle.frequency,\n              twinkleRgb = rangeColorToRgb(twinkle.color),\n              twinkling = getRandom() < twinkleFreq;\n\n          if (twinkling && twinkleRgb) {\n            colorLine = twinkleRgb;\n            opacity = getRangeValue(twinkle.opacity);\n          }\n        }\n\n        if (!colorLine) {\n          var linksOptions = p1.options.links,\n              linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n          colorLine = getLinkColor(p1, p2, linkColor);\n        }\n\n        if (!colorLine) {\n          return;\n        }\n\n        var width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : 0,\n            maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : 0;\n\n        _drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n      });\n    }\n  }, {\n    key: \"drawLinkTriangle\",\n    value: function drawLinkTriangle(p1, link1, link2) {\n      var _a;\n\n      if (!p1.options.links) {\n        return;\n      }\n\n      var container = this.container,\n          options = container.actualOptions,\n          p2 = link1.destination,\n          p3 = link2.destination,\n          triangleOptions = p1.options.links.triangles,\n          opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n\n      if (opacityTriangle <= 0) {\n        return;\n      }\n\n      container.canvas.draw(function (ctx) {\n        var _a;\n\n        var pos1 = p1.getPosition(),\n            pos2 = p2.getPosition(),\n            pos3 = p3.getPosition(),\n            linksDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0;\n\n        if (getDistance(pos1, pos2) > linksDistance || getDistance(pos3, pos2) > linksDistance || getDistance(pos3, pos1) > linksDistance) {\n          return;\n        }\n\n        var colorTriangle = rangeColorToRgb(triangleOptions.color);\n\n        if (!colorTriangle) {\n          var linksOptions = p1.options.links,\n              linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n          colorTriangle = getLinkColor(p1, p2, linkColor);\n        }\n\n        if (!colorTriangle) {\n          return;\n        }\n\n        _drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n      });\n    }\n  }, {\n    key: \"drawTriangles\",\n    value: function drawTriangles(container, options, p1, link, p1Links) {\n      var _a, _b, _c;\n\n      var p2 = link.destination,\n          particles = container.particles;\n\n      if (!(((_a = options.links) === null || _a === void 0 ? void 0 : _a.triangles.enable) && ((_b = p2.options.links) === null || _b === void 0 ? void 0 : _b.triangles.enable))) {\n        return;\n      }\n\n      var vertices = (_c = p2.links) === null || _c === void 0 ? void 0 : _c.filter(function (t) {\n        var linkFreq = container.particles.getLinkFrequency(p2, t.destination);\n        return p2.options.links && linkFreq <= p2.options.links.frequency && p1Links.findIndex(function (l) {\n          return l.destination === t.destination;\n        }) >= 0;\n      });\n\n      if (!(vertices === null || vertices === void 0 ? void 0 : vertices.length)) {\n        return;\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(vertices),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var vertex = _step2.value;\n          var p3 = vertex.destination,\n              triangleFreq = particles.getTriangleFrequency(p1, p2, p3);\n\n          if (triangleFreq > options.links.triangles.frequency) {\n            continue;\n          }\n\n          this.drawLinkTriangle(p1, link, vertex);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }]);\n\n  return LinkInstance;\n}();","map":null,"metadata":{},"sourceType":"module"}